package pages.profile;

import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.time.Duration;

public class ProfilePage {
    private final WebDriver driver;
    private final WebDriverWait wait;
    private static final Logger logger = LogManager.getLogger(ProfilePage.class);

    // --- Locators ---
    private final By avatarIcon = By.xpath("//img[contains(@class,'h-10') or contains(@alt,'avatar')]");
    private final By loginMenu = By.xpath("//button[normalize-space()='ƒêƒÉng nh·∫≠p']");
    private final By dashboardBtn = By.xpath("//a[contains(@href,'/info-user') or text()='Dashboard']");
    private final By uploadAvatarBtn = By.xpath("//button[contains(.,'C·∫≠p nh·∫≠t ·∫£nh') or contains(.,'ƒê·ªïi ·∫£nh') or contains(.,'Thay ƒë·ªïi')]");
    private final By uploadInput = By.xpath("//input[@type='file']");
    private final By uploadAvatarConfirmBtn = By.xpath("//button[contains(.,'Upload Avatar') or contains(.,'T·∫£i l√™n') or contains(.,'Upload')]");
    private final By editProfileBtn = By.xpath("//button[contains(.,'Ch·ªânh s·ª≠a h·ªì s∆°') or contains(.,'S·ª≠a th√¥ng tin')]");
    private final By saveProfileBtn = By.xpath("//button[normalize-space()='C·∫≠p nh·∫≠t' or normalize-space()='L∆∞u']");
    private final By toastLocator = By.xpath("//div[contains(@class,'toast') or contains(@class,'ant-notification-notice')]");

    public ProfilePage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(25));
    }

    // --- Helper click (·ªïn ƒë·ªãnh h∆°n v·ªõi scroll + JS fallback) ---
    private void clickElement(By locator) {
        try {
            WebElement element = wait.until(ExpectedConditions.elementToBeClickable(locator));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", element);
            try {
                element.click();
            } catch (ElementClickInterceptedException ex) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
            }
        } catch (Exception e) {
            logger.error("‚ùå Kh√¥ng click ƒë∆∞·ª£c element: {}", locator, e);
            throw new RuntimeException("Kh√¥ng th·ªÉ click element: " + locator, e);
        }
    }

    // --- 1Ô∏è‚É£ M·ªü modal ƒëƒÉng nh·∫≠p ---
    public void openLoginModal() {
        try {
            clickElement(avatarIcon);
            WebElement loginBtn = wait.until(ExpectedConditions.visibilityOfElementLocated(loginMenu));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", loginBtn);
            logger.info("üü¢ ƒê√£ m·ªü modal ƒëƒÉng nh·∫≠p");
        } catch (Exception e) {
            logger.error("‚ùå Kh√¥ng th·ªÉ m·ªü modal ƒëƒÉng nh·∫≠p", e);
            throw e;
        }
    }

    // --- 2Ô∏è‚É£ ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn Dashboard ---
    public void goToDashboard() {
        clickElement(avatarIcon);
        clickElement(dashboardBtn);
        wait.until(ExpectedConditions.urlContains("/info-user"));
        logger.info("üü¢ ƒê√£ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang info-user");
    }

    // --- 3Ô∏è‚É£ Upload Avatar ---
    public void uploadAvatar(String imagePath) {
        try {
            // M·ªü modal upload (n·∫øu c√≥ n√∫t ƒë·ªÉ m·ªü)
            try {
                clickElement(uploadAvatarBtn);
            } catch (Exception ignore) {
                logger.info("‚ö† Kh√¥ng c√≥ n√∫t m·ªü modal upload, c√≥ th·ªÉ input hi·ªÉn th·ªã s·∫µn");
            }

            WebElement uploadElem = wait.until(ExpectedConditions.presenceOfElementLocated(uploadInput));
            uploadElem.sendKeys(imagePath);
            logger.info("üì∏ ƒê√£ ch·ªçn file upload: {}", imagePath);

        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi upload avatar", e);
            throw e;
        }
    }

    // --- Click n√∫t Upload Avatar ---
    public void clickUploadAvatarButton() {
        try {
            WebElement confirm = wait.until(ExpectedConditions.elementToBeClickable(uploadAvatarConfirmBtn));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", confirm);
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", confirm);
            logger.info("‚úÖ Click n√∫t 'Upload Avatar' th√†nh c√¥ng");

            // Ch·ªù modal bi·∫øn m·∫•t
            wait.until(ExpectedConditions.invisibilityOfElementLocated(uploadAvatarConfirmBtn));
        } catch (TimeoutException e) {
            logger.error("‚ùå H·∫øt th·ªùi gian ch·ªù: N√∫t Upload Avatar kh√¥ng kh·∫£ d·ª•ng", e);
        } catch (Exception e) {
            logger.error("‚ùå Kh√¥ng th·ªÉ click n√∫t Upload Avatar", e);
        }
    }

    // --- L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh avatar hi·ªán t·∫°i ---
    public String getAvatarSrc() {
        try {
            WebElement avatar = wait.until(ExpectedConditions.visibilityOfElementLocated(avatarIcon));
            return avatar.getAttribute("src");
        } catch (Exception e) {
            logger.warn("‚ö† Kh√¥ng l·∫•y ƒë∆∞·ª£c src avatar");
            return "";
        }
    }

    // --- 4Ô∏è‚É£ Ch·ªânh s·ª≠a h·ªì s∆° ---
    public void editProfile(String name, String phone, String birthday) {
        try {
            clickElement(editProfileBtn);

            WebElement nameField = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("name")));
            WebElement phoneField = driver.findElement(By.id("phone"));
            WebElement birthdayField = driver.findElement(By.id("birthday"));

            clearAndType(nameField, name);
            clearAndType(phoneField, phone);
            clearAndType(birthdayField, birthday);

            clickElement(saveProfileBtn);
            logger.info("üìù ƒê√£ c·∫≠p nh·∫≠t h·ªì s∆°: {} - {} - {}", name, phone, birthday);
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi ch·ªânh s·ª≠a h·ªì s∆°", e);
            throw e;
        }
    }

    // Helper: x√≥a v√† nh·∫≠p text an to√†n
    private void clearAndType(WebElement field, String text) {
        field.sendKeys(Keys.chord(Keys.CONTROL, "a", Keys.DELETE));
        field.sendKeys(text);
    }

    // --- 5Ô∏è‚É£ L·∫•y th√¥ng b√°o toast ---
    public String getToastMessage() {
        try {
            WebElement toast = wait.until(ExpectedConditions.visibilityOfElementLocated(toastLocator));
            String message = toast.getText().trim();
            logger.info("üîî Th√¥ng b√°o: {}", message);
            return message;
        } catch (TimeoutException e) {
            logger.warn("‚ö† Kh√¥ng th·∫•y toast message hi·ªÉn th·ªã");
            return "";
        }
    }
}
